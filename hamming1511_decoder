// LSB first
module hamming1511_decoder (
    input  [14:0] encoded,       // [ p1 p2 d0 p3 d1 d2 d3 p4 d4 d5 d6 d7 d8 d9 d10 ]
    output reg [10:0] corrected,
    output reg error_detected
);
    wire [3:0] syndrome;
    // syndrome calculation
    assign syndrome[0] = encoded[0] ^ encoded[2] ^ encoded[4] ^ encoded[6] ^ encoded[8] ^ encoded[10] ^ encoded[12] ^ encoded[14];
    assign syndrome[1] = encoded[1] ^ encoded[2] ^ encoded[5] ^ encoded[6] ^ encoded[9] ^ encoded[10] ^ encoded[13] ^ encoded[14];
    assign syndrome[2] = encoded[3] ^ encoded[4] ^ encoded[5] ^ encoded[6] ^ encoded[11] ^ encoded[12] ^ encoded[13] ^ encoded[14];
    assign syndrome[3] = encoded[7] ^ encoded[8] ^ encoded[9] ^ encoded[10] ^ encoded[11] ^ encoded[12] ^ encoded[13] ^ encoded[14];

    always @(*) begin
        corrected = {
            encoded[14], // d10
            encoded[13], // d9
            encoded[12], // d8
            encoded[11], // d7
            encoded[10], // d6
            encoded[9],  // d5
            encoded[8],  // d4
            encoded[6],  // d3
            encoded[5],  // d2
            encoded[4],  // d1
            encoded[2]   // d0
        };
        error_detected = (syndrome != 0);

        // Correct the erroneous bit (if any)
        case (syndrome)
            4'b0001: begin // p1 wrong (encoded[0])
                error_detected = 1'b0; // Parity bit errors don't affect data
            end
            4'b0010: begin // p2 wrong (encoded[1])
                error_detected = 1'b0;
            end
            4'b0011: begin // d0 wrong (encoded[2])
                data_out[0] = ~data_out[0];
            end
            4'b0100: begin // p3 wrong (encoded[3])
                error_detected = 1'b0;
            end
            4'b0101: begin // d1 wrong (encoded[4])
                data_out[1] = ~data_out[1];
            end
            4'b0110: begin // d2 wrong (encoded[5])
                data_out[2] = ~data_out[2];
            end
            4'b0111: begin // d3 wrong (encoded[6])
                data_out[3] = ~data_out[3];
            end
            4'b1000: begin // p4 wrong (encoded[7])
                error_detected = 1'b0;
            end
            // ... (cover all 15 cases)
            default: error_detected = 1'b0;
        endcase
    end
endmodule
